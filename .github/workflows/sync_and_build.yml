
name: sync_and_build
on:
  push:
    branches:
      - master
  workflow_dispatch:
  schedule:
    - cron: '30 6 * * 0'

jobs:
  sync:
    runs-on: ubuntu-20.04
    if: ${{ github.event_name != 'workflow_dispatch' }}
    steps:
      - uses: tgymnich/fork-sync@v1.8
        with:
          base: master
          head: master
          
  build:
    needs: sync
    if: ${{ success() || github.event_name == 'workflow_dispatch' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            cross: false

          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            cross: true

          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            cross: true

          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            cross: true

          - target: x86_64-apple-darwin
            os: macos-latest
            cross: false

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout BoringTun
        uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1.0.6
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Build
        uses: actions-rs/cargo@v1.0.1
        with:
          use-cross: ${{ matrix.cross }}
          command: build
          args: --release --bin boringtun-cli --target=${{ matrix.target }}
          
      - name: Pack
        run: |
          tar -C ./target/${{ matrix.target }}/release/ -czf boringtun-cli-${{ matrix.target }}.tgz boringtun-cli
  
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
         name: boringtun-cli-${{ matrix.target }}
         path: boringtun-cli-${{ matrix.target }}.tgz
         retention-days: 1

  publish:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ always() && needs.build.result == 'success' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R 
        working-directory: ./artifacts
        
      - name: move to new path
        run: |
          mkdir release
          find ./artifacts -iname '*.tgz' -print0|xargs -0i  mv {} ./release/

      - name: generate hash
        shell: bash
        working-directory: ./release
        run: |
          set -x
          for f in *.tgz; do sha256sum "$f">"$f".sha256; done
          
      - name: Release
        shell: bash
        run: |
          set -x
          build_date=$(date +%m-%d-%Y_%N)
          commit_hash=$(git ls-remote -q https://github.com/cloudflare/boringtun.git HEAD|awk '{print $1}')
          for f in ./release/*.tgz; do FILES+=" -a $f"; done
          for f in ./release/*.sha256; do FILES+=" -a $f";MSG+="sha256 $(cat $f)\n"; done
          MSG=$(printf "$build_date\n\nBuilt from https://github.com/cloudflare/boringtun/commit/$commit_hash\n$MSG")
          hub release create $build_date -m "$MSG" $FILES
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Upload S3
        shell: bash
        working-directory: ./release
        run: |
          set -x
          for f in *; do aws s3  --endpoint-url=https://gateway.storjshare.io cp "$f" s3://deb/; done
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_EC2_METADATA_DISABLED: true

